import { Options } from 'vue-class-component';{{modelImport}}
import { ComponentBase, EJComponentDecorator, getProps, allVue, gh } from '@syncfusion/ej2-vue-base';
import { isNullOrUndefined } from '@syncfusion/ej2-base';

import { {{ComponentClass}} } from '{{packagepath}}';
{{childDirectiveImport}}

// {{VueImport}}
export const properties: string[] = [{{properties}}];
export const modelProps: string[] = [{{models}}];

export const testProp: any = getProps({props: properties});
export const props = testProp[0];
export const watch = testProp[1];

export const emitProbs: any = Object.keys(watch);
emitProbs.push('modelchanged');
for (let props of modelProps) {
    emitProbs.push(
        'update:'+props
    );
}

export const isExecute: any = gh ? false : true;

export let tempProxy: any;

{{componentComments}}
@EJComponentDecorator({
    props: properties{{modelEvent}}
},isExecute)

/* Start Options({
    props: props,
    watch: watch,
    emits: emitProbs
}) End */

export class {{ComponentClass}}Component extends ComponentBase {
    
    public ej2Instances: any;
    public propKeys: string[] = properties;
    public models: string[] = modelProps;
    public hasChildDirective: boolean = {{hasChildDirective}};
    protected hasInjectedModules: boolean = {{dynamicModules}};
    public tagMapper: { [key: string]: Object } = {{tagMapper}};
    public tagNameMapper: Object = {{tagNameMapper}};
    public isVue3: boolean;
    
    constructor() {
        super(arguments);
        this.isVue3 = !isExecute;
        this.ej2Instances = new {{ComponentClass}}({});{{triggerChange}}
        this.bindProperties();
        this.ej2Instances._setProperties = this.ej2Instances.setProperties;
        this.ej2Instances.setProperties = this.setProperties;
        tempProxy = this;
    }
    public setProperties(prop: any, muteOnChange: boolean): void {
        if(this.isVue3) {
            this.models = !this.models ? this.ej2Instances.referModels : this.models;
        }
        if (this.ej2Instances && this.ej2Instances._setProperties) {
            this.ej2Instances._setProperties(prop, muteOnChange);
        }
        if (prop && this.models && this.models.length) {
            Object.keys(prop).map((key: string): void => {
                this.models.map((model: string): void => {
                    if ((key === model) && !(/datasource/i.test(key))) {
                        if (this.isVue3) {
                            this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);
                        } else {
                            (this as any).$emit('update:' + key, prop[key]);
                        }
                    }
                });
            });
        }
    }
{{modelTrigger}}
    public render(createElement: any) {
        let h: any = gh || createElement;
        let slots: any = null;
        if(!isNullOrUndefined((this as any).$slots.default)) {
            slots = gh ? (this as any).$slots.default() : (this as any).$slots.default;
        }
        return h('{{tagName}}', slots);
    }
    {{method}}
}

export const {{ComponentClass}}Plugin = {
    name: 'ejs-{{Component}}',
    install(Vue: any) {
        Vue.component({{ComponentClass}}Plugin.name, {{ComponentClass}}Component);
{{childDirectivePlugin}}
    }
}
