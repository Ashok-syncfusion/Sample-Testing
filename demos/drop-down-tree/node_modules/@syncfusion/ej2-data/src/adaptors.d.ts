import { Ajax } from '@syncfusion/ej2-base';
import { Aggregates } from './util';
import { DataManager, DataOptions } from './manager';
import { Query, Predicate, QueryOptions, ParamOption } from './query';
/**
 * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.
 * This is the base adaptor class that other adaptors can extend.
 *
 * @hidden
 */
export declare class Adaptor {
    /**
     * Specifies the datasource option.
     *
     * @default null
     */
    dataSource: DataOptions;
    updateType: string;
    updateKey: string;
    /**
     * It contains the datamanager operations list like group, searches, etc.,
     *
     * @default null
     * @hidden
     */
    pvt: PvtOptions;
    /**
     * Constructor for Adaptor class
     *
     * @param {DataOptions} ds - Defines the Data Options
     * @hidden
     */
    constructor(ds?: DataOptions);
    protected options: RemoteOptions;
    /**
     * Returns the data from the query processing.
     *
     * @param {Object} data - Defines the data
     * @param {DataOptions} ds - Defines the Data options
     * @param {Query} query - Defines the query
     * @param {XMLHttpRequest} xhr - Defines the XML Http Request
     * @returns {Object} - Returns the data from the query processing
     */
    processResponse(data: Object, ds?: DataOptions, query?: Query, xhr?: XMLHttpRequest): Object;
    /**
     * Specifies the type of adaptor.
     *
     * @default Adaptor
     */
    type: Object;
}
/**
 * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.
 *
 * @hidden
 */
export declare class JsonAdaptor extends Adaptor {
    /**
     * Process the JSON data based on the provided queries.
     *
     * @param  {DataManager} dataManager - Defines the data manager
     * @param  {Query} query - Defines the query
     * @returns {Object} returns the JSON data based on the provided queries.
     */
    processQuery(dataManager: DataManager, query: Query): Object;
    /**
     * Perform lazy load grouping in JSON array based on the given query and lazy load details.
     *
     * @param  {LazyLoadGroupArgs} args - Defines the arguments
     * @returns {Object[]} returns the object
     */
    lazyLoadGroup(args: LazyLoadGroupArgs): {
        result: Object[];
        count: number;
    };
    private formGroupResult;
    /**
     * Separate the aggregate query from the given queries
     *
     * @param  {Query} query - Defines the query
     * @returns {Object[]} Returns the aggregate object
     */
    getAggregate(query: Query): Object[];
    /**
     * Performs batch update in the JSON array which add, remove and update records.
     *
     * @param  {DataManager} dm - Defines the data manager
     * @param  {CrudOptions} changes - Defines the changes in crud options
     * @param  {RemoteArgs} e - Defines the remote args
     * @returns {CrudOptions} Returns the crud options
     */
    batchRequest(dm: DataManager, changes: CrudOptions, e: RemoteArgs): CrudOptions;
    /**
     * Performs filter operation with the given data and where query.
     *
     * @param {Object[]} ds - Defines the object
     * @param {{validate:Function}} e - Defines the e object
     * @returns {Object[]} Returns the onwhere object
     */
    onWhere(ds: Object[], e: {
        validate: Function;
    }): Object[];
    /**
     * Returns aggregate function based on the aggregate type.
     *
     * @param {Object[]} ds - Defines the object
     * @param {Object} e - Defines the field
     * @returns {Function} Returns aggregate function based on the aggregate type.
     */
    onAggregates(ds: Object[], e: {
        field: string;
        type: string;
    }): Function;
    /**
     * Performs search operation based on the given query.
     *
     * @param  {Object[]} ds - Defines the object
     * @param  {QueryOptions} e - Defines the query options
     * @returns {Object[]} Returns search operation based on the given query.
     */
    onSearch(ds: Object[], e: QueryOptions): Object[];
    /**
     * Sort the data with given direction and field.
     *
     * @param {Object[]} ds - Defines the ds object
     * @param {Object} e - Defines the comparer object
     * @param {Query} query - Defines the query
     * @returns {Object[]} Sort the data with given direction and field.
     */
    onSortBy(ds: Object[], e: {
        comparer: (a: Object, b: Object) => number;
        fieldName: string;
    }, query: Query): Object[];
    /**
     * Group the data based on the given query.
     *
     * @param  {Object[]} ds - Defines the ds Object
     * @param  {QueryOptions} e - Defines the Query options
     * @param  {Query} query - Defines the query
     * @returns {Object[]} returns the Group data based on the given query.
     */
    onGroup(ds: Object[], e: QueryOptions, query: Query): Object[];
    /**
     * Retrieves records based on the given page index and size.
     *
     * @param {Object[]} ds - Defines the ds Object
     * @param {Object} e - Defines the pagesize and page number in object
     * @param {Query} query - Defines the query
     * @returns {Object[]} returns the retrieves records based on the given page index and size.
     */
    onPage(ds: Object[], e: {
        pageSize: number;
        pageIndex: number;
    }, query: Query): Object[];
    /**
     * Retrieves records based on the given start and end index from query.
     *
     * @param {Object[]} ds - Defines the ds object
     * @param {Object} e - Defines the start and end in number
     * @returns {Object[]} Returns the onranged objects
     */
    onRange(ds: Object[], e: {
        start: number;
        end: number;
    }): Object[];
    /**
     * Picks the given count of records from the top of the datasource.
     *
     * @param {Object[]} ds - Defines the ds object
     * @param {{nos:number}} e - Defines the e object
     * @returns {Object[]} Returns the onTake object
     */
    onTake(ds: Object[], e: {
        nos: number;
    }): Object[];
    /**
     * Skips the given count of records from the data source.
     *
     * @param {Object[]} ds - Defines the ds object
     * @param {{nos:number}} e - Defines the e object
     * @returns {Object[]} Returns the onSkip object
     */
    onSkip(ds: Object[], e: {
        nos: number;
    }): Object[];
    /**
     * Selects specified columns from the data source.
     *
     * @param {Object[]} ds - Defines the ds object
     * @param {Object} e - Defines the e object
     * @returns {Object[]} Returns the onSelect object
     */
    onSelect(ds: Object[], e: {
        fieldNames: string[] | Function;
    }): Object[];
    /**
     * Inserts new record in the table.
     *
     * @param {DataManager} dm - Defines the Datamanager
     * @param {Object} data - Defines the data
     * @param {string} tableName - Defines the table name
     * @param {Query} query - Defines the query
     * @param {number} position - Defines the position
     * @returns {Object} Inserts new record in the table.
     */
    insert(dm: DataManager, data: Object, tableName?: string, query?: Query, position?: number): Object;
    /**
     * Remove the data from the dataSource based on the key field value.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {string} keyField - Defines the keyField
     * @param {Object} value - Defines the value
     * @param {string} tableName - Defines the tabla name
     * @returns {Object} Remove the data from the dataSource based on the key field value.
     */
    remove(dm: DataManager, keyField: string, value: Object, tableName?: string): Object;
    /**
     * Updates existing record and saves the changes to the table.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {string} keyField - Defines the keyField
     * @param {Object} value - Defines the value
     * @param {string} tableName - Defines the tabla name
     * @returns {Object} Updates existing record and saves the changes to the table.
     */
    update(dm: DataManager, keyField: string, value: Object, tableName?: string): void;
}
/**
 * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.
 * It interacts with server-side for all DataManager Queries and CRUD operations.
 *
 * @hidden
 */
export declare class UrlAdaptor extends Adaptor {
    /**
     * Process the query to generate request body.
     *
     * @param {DataManager} dm
     * @param {Query} query
     * @param {Object[]} hierarchyFilters?
     * @param hierarchyFilters
     * @returns p
     */
    processQuery(dm: DataManager, query: Query, hierarchyFilters?: Object[]): Object;
    private getRequestQuery;
    /**
     * Convert the object from processQuery to string which can be added query string.
     *
     * @param {Object} request - Defines the request object
     * @param {Query} query - Defines the query
     * @param {DataManager} dm - Defines the data manager
     * @returns {string} Convert the object from processQuery to string which can be added query string.
     */
    convertToQueryString(request: Object, query: Query, dm: DataManager): string;
    /**
     * Return the data from the data manager processing.
     *
     * @param {DataResult} data - Defines the data result
     * @param {DataOptions} ds - Defines the data options
     * @param {Query} query - Defines the query
     * @param {XMLHttpRequest} xhr - Defines the XMLHttpRequest
     * @param {Object} request - Defines the request Object
     * @param {CrudOptions} changes - Defines the crud changes
     * @returns {DataResult} Return the data from the data manager processing.
     */
    processResponse(data: DataResult, ds?: DataOptions, query?: Query, xhr?: XMLHttpRequest, request?: Object, changes?: CrudOptions): DataResult;
    private formRemoteGroupedData;
    private getGroupedRecords;
    /**
     * Add the group query to the adaptor`s option.
     *
     * @param  {Object[]} e - Defines the Query options
     * @returns {void}
     */
    onGroup(e: QueryOptions[]): QueryOptions[];
    /**
     * Add the aggregate query to the adaptor`s option.
     *
     * @param  {Aggregates[]} e Defines the aggragates
     * @returns {void}
     */
    onAggregates(e: Aggregates[]): void;
    /**
     * Prepare the request body based on the newly added, removed and updated records.
     * The result is used by the batch request.
     *
     * @param {DataManager} dm - Defines the Data manager
     * @param {CrudOptions} changes - Defines the changes
     * @param {Object} e - Defines the object
     * @param {Query} query - Defines the query
     * @param {Object} original - Defines the original
     * @returns {Object} Prepare the request body based on the newly added, removed and updated records
     */
    batchRequest(dm: DataManager, changes: CrudOptions, e: Object, query: Query, original?: Object): Object;
    /**
     * Method will trigger before send the request to server side.
     * Used to set the custom header or modify the request options.
     *
     * @param  {DataManager} dm - Defines the Data manager
     * @param  {XMLHttpRequest} request - Defines the XMLHttpRequest
     * @returns {void}
     */
    beforeSend(dm: DataManager, request: XMLHttpRequest): void;
    /**
     * Prepare and returns request body which is used to insert a new record in the table.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {Object} data - Defines the data
     * @param {string} tableName - Defines the tabel name
     * @param {Query} query - Prepare and returns request body which is used to insert a new record in the table.
     * @returns {Object} returns request body which is used to insert a new record in the table.
     */
    insert(dm: DataManager, data: Object, tableName: string, query: Query): Object;
    /**
     * Prepare and return request body which is used to remove record from the table.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {string} keyField - Defines the keyField
     * @param {number|string} value - Defines the value
     * @param {string} tableName - Defines the table name
     * @param {Query} query - Defines the Query
     * @returns {Object} Prepare and return request body which is used to remove record from the table.
     */
    remove(dm: DataManager, keyField: string, value: number | string, tableName: string, query: Query): Object;
    /**
     * Prepare and return request body which is used to update record.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {string} keyField - Defines the keyField
     * @param {number|string} value - Defines the value
     * @param {string} tableName - Defines the table name
     * @param {Query} query - Defines the Query
     * @returns {Object} Prepare and return request body which is used to update record.
     */
    update(dm: DataManager, keyField: string, value: Object, tableName: string, query: Query): Object;
    /**
     * To generate the predicate based on the filtered query.
     *
     * @param  {Object[]|string[]|number[]} data - Defines the data
     * @param  {Query} query - Defines the query
     * @returns {Predicate} To generate the predicate based on the filtered query.
     * @hidden
     */
    getFiltersFrom(data: Object[] | string[] | number[], query: Query): Predicate;
    protected getAggregateResult(pvt: PvtOptions, data: DataResult, args: DataResult, groupDs?: Object[], query?: Query): DataResult;
    protected getQueryRequest(query: Query): Requests;
    addParams(options: {
        dm: DataManager;
        query: Query;
        params: ParamOption[];
        reqParams: {
            [key: string]: Object;
        };
    }): void;
}
/**
 * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.
 *
 * @hidden
 */
export declare class ODataAdaptor extends UrlAdaptor {
    protected getModuleName(): string;
    /**
     * Specifies the root url of the provided odata url.
     *
     * @hidden
     * @default null
     */
    rootUrl: string;
    /**
     * Specifies the resource name of the provided odata table.
     *
     * @hidden
     * @default null
     */
    resourceTableName: string;
    protected options: RemoteOptions;
    constructor(props?: RemoteOptions);
    /**
     * Generate request string based on the filter criteria from query.
     *
     * @param {Predicate} predicate - Defines the predicate
     * @param {Query | boolean} query - Defines the query
     * @param {boolean} requiresCast - Defines the cast
     * @returns {string} Generate request string based on the filter criteria from query.
     */
    onPredicate(predicate: Predicate, query: Query | boolean, requiresCast?: boolean): string;
    addParams(options: {
        dm: DataManager;
        query: Query;
        params: ParamOption[];
        reqParams: {
            [key: string]: Object;
        };
    }): void;
    /**
     * Generate request string based on the multiple filter criteria from query.
     *
     * @param {Predicate} predicate - Defines the predicate
     * @param {Query} query - Defines the query
     * @param {boolean} requiresCast - Defines the requirecase
     * @returns {string} Generate request string based on the multiple filter criteria from query.
     */
    onComplexPredicate(predicate: Predicate, query: Query, requiresCast?: boolean): string;
    /**
     * Generate query string based on the multiple filter criteria from query.
     *
     * @param {Predicate} filter - Defines the filter Predicate
     * @param {Query} query - Defines the query
     * @param {boolean} requiresCast - Defines the requiresCast
     * @returns {string} Generate query string based on the multiple filter criteria from query.
     */
    onEachWhere(filter: Predicate, query: Query, requiresCast?: boolean): string;
    /**
     * Generate query string based on the multiple filter criteria from query.
     *
     * @param  {string[]} filters - Defines the filter string
     * @returns {string} Generate query string based on the multiple filter criteria from query.
     */
    onWhere(filters: string[]): string;
    /**
     * Generate query string based on the multiple search criteria from query.
     *
     * @param {Object} e - Defines the search object
     * @returns {void}
     */
    onEachSearch(e: {
        fields: string[];
        operator: string;
        key: string;
        ignoreCase: boolean;
    }): void;
    /**
     * Generate query string based on the search criteria from query.
     *
     * @param {Object} e - Defines the e object
     * @returns {string} Generate query string based on the search criteria from query.
     */
    onSearch(e: Object): string;
    /**
     * Generate query string based on multiple sort criteria from query.
     *
     * @param  {QueryOptions} e - Defines the query options
     * @returns {string} Generate query string based on multiple sort criteria from query.
     */
    onEachSort(e: QueryOptions): string;
    /**
     * Returns sort query string.
     *
     * @param  {string[]} e - Defines the string
     * @returns {string} Returns sort query string.
     */
    onSortBy(e: string[]): string;
    /**
     * Adds the group query to the adaptor option.
     *
     * @param {QueryOptions[]} e - Defines the query options
     * @returns {QueryOptions[]} Adds the group query to the adaptor option.
     */
    onGroup(e: QueryOptions[]): QueryOptions[];
    /**
     * Returns the select query string.
     *
     * @param  {string[]} e - Defines the string
     * @returns {string} Returns the select query string.
     */
    onSelect(e: string[]): string;
    /**
     * Add the aggregate query to the adaptor option.
     *
     * @param  {Object[]} e - Defines the string
     * @returns {string} Add the aggregate query to the adaptor option.
     */
    onAggregates(e: Object[]): string;
    /**
     * Returns the query string which requests total count from the data source.
     *
     * @param  {boolean} e - Defines the string
     * @returns {string} Returns the query string which requests total count from the data source.
     */
    onCount(e: boolean): string;
    /**
     * Method will trigger before send the request to server side.
     * Used to set the custom header or modify the request options.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {XMLHttpRequest} request - Defines teh XMLHttpRequest
     * @param {Ajax} settings - Defines the Ajax settings
     * @returns {void}
     */
    beforeSend(dm: DataManager, request: XMLHttpRequest, settings?: Ajax): void;
    /**
     * Returns the data from the query processing.
     *
     * @param {DataResult} data - Defines the data result
     * @param {DataOptions} ds - Defines the data options
     * @param {Query} query - Defines the query
     * @param {XMLHttpRequest} xhr - Defines the XMLHttpRequest
     * @param {Ajax} request - Defines the request
     * @param {CrudOptions} changes - Defines the changes
     * @returns {Object} Returns the data from the query processing.
     */
    processResponse(data: DataResult, ds?: DataOptions, query?: Query, xhr?: XMLHttpRequest, request?: Ajax, changes?: CrudOptions): Object;
    /**
     * Converts the request object to query string.
     *
     * @param {Object} request - Defines the request
     * @param {Query} query - Defines the query
     * @param {DataManager} dm - Defines teh data manager
     * @returns {string} Converts the request object to query string.
     */
    convertToQueryString(request: Object, query: Query, dm: DataManager): string;
    private localTimeReplacer;
    /**
     * Prepare and returns request body which is used to insert a new record in the table.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {Object} data - Defines the data
     * @param {string} tableName - Defines the tablename
     * @returns {Object} Prepare and returns request body which is used to insert a new record in the table.
     */
    insert(dm: DataManager, data: Object, tableName?: string): Object;
    /**
     * Prepare and return request body which is used to remove record from the table.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {string} keyField - Defines the keyField
     * @param {Object} value - Defines the value
     * @param {string} tableName - Defines the tablename
     * @returns {Object} Prepare and return request body which is used to remove record from the table.
     */
    remove(dm: DataManager, keyField: string, value: number, tableName?: string): Object;
    /**
     * Updates existing record and saves the changes to the table.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {string} keyField - Defines the keyfield
     * @param {Object} value - Defines the value
     * @param {string} tableName - Define steh table name
     * @param {Query} query - Defines the query
     * @param {Object} original - Defines the original object
     * @returns {Object} Updates existing record and saves the changes to the table.
     */
    update(dm: DataManager, keyField: string, value: Object, tableName?: string, query?: Query, original?: Object): Object;
    /**
     * Prepare the request body based on the newly added, removed and updated records.
     * The result is used by the batch request.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {CrudOptions} changes - Defines the changes
     * @param {RemoteArgs} e - Defines the remote args
     * @param {Query} query - Defines the query
     * @param {CrudOptions} original - Defines the original crud options
     * @returns {Object} Prepare the request body based on the newly added, removed and updated records.
     */
    batchRequest(dm: DataManager, changes: CrudOptions, e: RemoteArgs, query: Query, original?: CrudOptions): Object;
    /**
     * Generate the string content from the removed records.
     * The result will be send during batch update.
     *
     * @param {Object[]} arr - Defines the object
     * @param {RemoteArgs} e - Defines the remote args
     * @param {DataManager} dm - Defines the data manager
     * @returns {string} Generate the string content from the removed records.
     */
    generateDeleteRequest(arr: Object[], e: RemoteArgs, dm: DataManager): string;
    /**
     * Generate the string content from the inserted records.
     * The result will be send during batch update.
     *
     * @param {Object[]} arr - Defines the arguments
     * @param {RemoteArgs} e - Defines the remote args
     * @param {DataManager} dm - Defines the data manager
     * @returns {string} Generate the string content from the inserted records.
     */
    generateInsertRequest(arr: Object[], e: RemoteArgs, dm: DataManager): string;
    /**
     * Generate the string content from the updated records.
     * The result will be send during batch update.
     *
     * @param {Object[]} arr - Defines the object
     * @param {RemoteArgs} e - Defines the remote args
     * @param {DataManager} dm - Defines the data
     * @param {Object[]} org - Defines the object
     * @returns {string} Generate the string content from the updated records.
     */
    generateUpdateRequest(arr: Object[], e: RemoteArgs, dm: DataManager, org?: Object[]): string;
    protected static getField(prop: string): string;
    private generateBodyContent;
    protected processBatchResponse(data: DataResult, query?: Query, xhr?: XMLHttpRequest, request?: Ajax, changes?: CrudOptions): CrudOptions | DataResult;
    compareAndRemove(data: Object, original: Object, key?: string): Object;
}
/**
 * The OData v4 is an improved version of OData protocols.
 * The DataManager uses the ODataV4Adaptor to consume OData v4 services.
 *
 * @hidden
 */
export declare class ODataV4Adaptor extends ODataAdaptor {
    /**
     * @returns {string} Returns the module name
     * @hidden
     */
    protected getModuleName(): string;
    protected options: RemoteOptions;
    constructor(props?: RemoteOptions);
    /**
     * Returns the query string which requests total count from the data source.
     *
     * @param  {boolean} e - Defines the count in boolean
     * @returns {string} Returns the query string which requests total count from the data source.
     */
    onCount(e: boolean): string;
    /**
     * Generate request string based on the filter criteria from query.
     *
     * @param {Predicate} predicate - Defines the predicate
     * @param {Query | boolean} query - Defines the query
     * @param {boolean} requiresCast - Defines the requirescase
     * @returns {string} Generate request string based on the filter criteria from query.
     */
    onPredicate(predicate: Predicate, query: Query | boolean, requiresCast?: boolean): string;
    /**
     * Generate query string based on the multiple search criteria from query.
     *
     * @param {Object} e - Defines the object
     * @returns {void}
     */
    onEachSearch(e: {
        fields: string[];
        operator: string;
        key: string;
        ignoreCase: boolean;
    }): void;
    /**
     *  Generate query string based on the search criteria from query.
     *
     * @param {Object} e - Defines the object
     * @returns {void}
     */
    onSearch(e: Object): string;
    /**
     * Returns the expand query string.
     *
     * @param {object} e - Defines the object
     * @returns {string} Returns the expand query string.
     */
    onExpand(e: {
        selects: string[];
        expands: string[];
    }): string;
    /**
     * Returns the groupby query string.
     *
     * @param {string[]} distinctFields - Defines the distinct field
     * @returns {Object} Returns the groupby query string.
     */
    onDistinct(distinctFields: string[]): Object;
    /**
     * Returns the select query string.
     *
     * @param {string[]} e - Defines the distinct field
     * @returns {Object} Returns the select query string.
     */
    onSelect(e: string[]): string;
    /**
     * Method will trigger before send the request to server side.
     * Used to set the custom header or modify the request options.
     *
     * @param  {DataManager} dm - Defines the datamanager
     * @param  {XMLHttpRequest} request - Defines the XMLHttpRequest
     * @param  {Ajax} settings - Defines the Ajax
     * @returns {void}
     */
    beforeSend(dm: DataManager, request: XMLHttpRequest, settings: Ajax): void;
    /**
     * Returns the data from the query processing.
     *
     * @param {DataResult} data - Defines the Data result
     * @param {DataOptions} ds - Defines the data  options
     * @param {Query} query - Defines the query
     * @param {XMLHttpRequest} xhr - Defines the XMLHTTPRequest
     * @param {Ajax} request - Defines the ajax request
     * @param {CrudOptions} changes - Defines the rud changes
     * @returns {Object} Returns the data from the query processing.
     */
    processResponse(data: DataResult, ds?: DataOptions, query?: Query, xhr?: XMLHttpRequest, request?: Ajax, changes?: CrudOptions): Object;
}
/**
 * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.
 * The DataManager uses the WebApiAdaptor to consume Web API.
 * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
 *
 * @hidden
 */
export declare class WebApiAdaptor extends ODataAdaptor {
    protected getModuleName(): string;
    /**
     * Prepare and returns request body which is used to insert a new record in the table.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {Object} data - Defines the dat aobject
     * @param {string} tableName - Defines the table name
     * @param {Object} Prepare and returns request body which is used to insert a new record in the table.
     * @returns {Object} returns request body which is used to insert a new record in the table.
     */
    insert(dm: DataManager, data: Object, tableName?: string): Object;
    /**
     * Prepare and return request body which is used to remove record from the table.
     *
     * @param {DataManager} dm - Defines the dataManager
     * @param {string} keyField - Defines the key field
     * @param {number} value - Defines the value
     * @param {string} tableName - Defines the table name
     * @param {Object} Prepare and return request body which is used to remove record from the table.
     * @returns {Object} return request body which is used to remove record from the table.
     */
    remove(dm: DataManager, keyField: string, value: number, tableName?: string): Object;
    /**
     * Prepare and return request body which is used to update record.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {string} keyField - Defines the key field
     * @param {Object} value - Defines the value
     * @param {string} tableName - Defines the table name
     * @returns {Object} Prepare and return request body which is used to update record.
     */
    update(dm: DataManager, keyField: string, value: Object, tableName?: string): Object;
    batchRequest(dm: DataManager, changes: CrudOptions, e: RemoteArgs): Object;
    /**
     * Method will trigger before send the request to server side.
     * Used to set the custom header or modify the request options.
     *
     * @param  {DataManager} dm - Defines the data manager
     * @param  {XMLHttpRequest} request - Defines the XMLHttpRequest
     * @param  {Ajax} settings - Defines the ajax settings
     * @returns {void}
     */
    beforeSend(dm: DataManager, request: XMLHttpRequest, settings: Ajax): void;
    /**
     * Returns the data from the query processing.
     *
     * @param {DataResult} data - Defines the data result
     * @param {DataOptions} ds - Defines the data options
     * @param {Query} query - Defines the query
     * @param {XMLHttpRequest} xhr - Defines the XMLHttpReques
     * @param {Ajax} request - Defines the ajax request
     * @param {CrudOptions} changes - Defines the changes
     * @returns {Object} Returns the data from the query processing.
     */
    processResponse(data: DataResult, ds?: DataOptions, query?: Query, xhr?: XMLHttpRequest, request?: Ajax, changes?: CrudOptions): Object;
}
/**
 * WebMethodAdaptor can be used by DataManager to interact with web method.
 *
 * @hidden
 */
export declare class WebMethodAdaptor extends UrlAdaptor {
    /**
     * Prepare the request body based on the query.
     * The query information can be accessed at the WebMethod using variable named `value`.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {Query} query - Defines the query
     * @param {Object[]} hierarchyFilters - Defines the hierarchyFilters
     * @returns {Object} Prepare the request body based on the query.
     */
    processQuery(dm: DataManager, query: Query, hierarchyFilters?: Object[]): Object;
}
/**
 * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.
 * It interacts with server-side only for CRUD operations.
 *
 * @hidden
 */
export declare class RemoteSaveAdaptor extends JsonAdaptor {
    /**
     * @hidden
     */
    constructor();
    insert(dm: DataManager, data: Object, tableName: string, query: Query, position?: number): Object;
    remove(dm: DataManager, keyField: string, val: Object, tableName?: string, query?: Query): Object;
    update(dm: DataManager, keyField: string, val: Object, tableName: string, query?: Query): Object;
    processResponse(data: CrudOptions, ds?: DataOptions, query?: Query, xhr?: XMLHttpRequest, request?: Ajax, changes?: CrudOptions, e?: RemoteArgs): Object;
    /**
     * Prepare the request body based on the newly added, removed and updated records.
     * Also perform the changes in the locally cached data to sync with the remote data.
     * The result is used by the batch request.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {CrudOptions} changes - Defines the changes
     * @param {RemoteArgs} e - Defines the remote args
     * @param {Query} query - Defines the query
     * @param {Object} original - Defines the original object
     * @returns {Object} Returns the processed batch request
     */
    batchRequest(dm: DataManager, changes: CrudOptions, e: RemoteArgs, query?: Query, original?: Object): Object;
    addParams(options: {
        dm: DataManager;
        query: Query;
        params: ParamOption[];
        reqParams: {
            [key: string]: Object;
        };
    }): void;
}
/**
 * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.
 * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager
 *
 * @hidden
 */
export declare class CacheAdaptor extends UrlAdaptor {
    private cacheAdaptor;
    private pageSize;
    private guidId;
    private isCrudAction;
    private isInsertAction;
    /**
     * Constructor for CacheAdaptor class.
     *
     * @param {CacheAdaptor} adaptor - Defines the adaptor
     * @param {number} timeStamp - Defines the timestamp
     * @param {number} pageSize - Defines the pagesize
     * @hidden
     */
    constructor(adaptor?: CacheAdaptor, timeStamp?: number, pageSize?: number);
    /**
     * It will generate the key based on the URL when we send a request to server.
     *
     * @param {string} url - Defines the url
     * @param {Query} query - Defines the query
     * @returns {string} It will generate the key based on the URL when we send a request to server.
     * @hidden
     */
    generateKey(url: string, query: Query): string;
    /**
     * Process the query to generate request body.
     * If the data is already cached, it will return the cached data.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {Query} query - Defines the query
     * @param {Object[]} hierarchyFilters - Defines the hierarchyFilters object
     * @returns {Object} Process the query to generate request body
     */
    processQuery(dm: DataManager, query?: Query, hierarchyFilters?: Object[]): Object;
    /**
     * Returns the data from the query processing.
     * It will also cache the data for later usage.
     *
     * @param {DataResult} data - Defines the data result
     * @param {DataManager} ds - Defines the data manager
     * @param {Query} query - Defines the query
     * @param {XMLHttpRequest} xhr - Defines the XMHttpRequest
     * @param {Ajax} request - Defines the request
     * @param {CrudOptions} changes - Define the changes
     * @returns {DataResult} Returns the data from the query processing.
     */
    processResponse(data: DataResult, ds?: DataManager, query?: Query, xhr?: XMLHttpRequest, request?: Ajax, changes?: CrudOptions): DataResult;
    /**
     * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.
     *
     * @param {DataManager} dm - Defines the data manager
     * @param {XMLHttpRequest} request - Defines the XMLHttpRequest
     * @param {Ajax} settings - Defines the Ajax settings
     * @returns {void}
     */
    beforeSend(dm: DataManager, request: XMLHttpRequest, settings?: Ajax): void;
    /**
     * Updates existing record and saves the changes to the table.
     *
     * @param  {DataManager} dm - Defines the data manager
     * @param  {string} keyField - Defines the keyField
     * @param  {Object} value - Defines the value
     * @param  {string} tableName - Defines the tableName
     * @returns {Object} Updates existing record and saves the changes to the table.
     */
    update(dm: DataManager, keyField: string, value: Object, tableName: string): Object;
    /**
     * Prepare and returns request body which is used to insert a new record in the table.
     *
     * @param  {DataManager} dm - Defines the data manager
     * @param  {Object} data - Defines the data object
     * @param  {string} tableName - Defines the tableName
     * @returns {Object} Prepare and returns request body which is used to insert a new record in the table.
     */
    insert(dm: DataManager, data: Object, tableName?: string): Object;
    /**
     * Prepare and return request body which is used to remove record from the table.
     *
     * @param  {DataManager} dm - Defines the data manager
     * @param  {string} keyField - Defines the keyField
     * @param  {Object} value - Defines the value
     * @param  {string} tableName - Defines the tableName
     * @returns {Object} Prepare and return request body which is used to remove record from the table.
     */
    remove(dm: DataManager, keyField: string, value: Object, tableName?: string): Object[];
    /**
     * Prepare the request body based on the newly added, removed and updated records.
     * The result is used by the batch request.
     *
     * @param  {DataManager} dm - Defines the data manager
     * @param  {CrudOptions} changes - Defines the crud changes
     * @param  {RemoteArgs} e - Defines the remote args
     * @returns {CrudOptions} Prepare the request body based on the newly added, removed and updated records.
     */
    batchRequest(dm: DataManager, changes: CrudOptions, e: RemoteArgs): CrudOptions;
}
/**
 * @hidden
 */
export interface CrudOptions {
    changedRecords?: Object[];
    addedRecords?: Object[];
    deletedRecords?: Object[];
    changed?: Object[];
    added?: Object[];
    deleted?: Object[];
    action?: string;
    table?: string;
    key?: string;
}
/**
 * @hidden
 */
export interface PvtOptions {
    groups?: QueryOptions[];
    aggregates?: Aggregates[];
    search?: Object | Predicate;
    changeSet?: number;
    searches?: Object[];
    position?: number;
}
/**
 * @hidden
 */
export interface DataResult {
    nodeType?: number;
    addedRecords?: Object[];
    d?: DataResult | Object[];
    Count?: number;
    count?: number;
    result?: Object;
    results?: Object[] | DataResult;
    aggregate?: DataResult;
    aggregates?: Aggregates;
    value?: Object;
    Items?: Object[] | DataResult;
    keys?: string[];
    groupDs?: Object[];
}
/**
 * @hidden
 */
export interface Requests {
    sorts: QueryOptions[];
    groups: QueryOptions[];
    filters: QueryOptions[];
    searches: QueryOptions[];
    aggregates: QueryOptions[];
}
/**
 * @hidden
 */
export interface RemoteArgs {
    guid?: string;
    url?: string;
    key?: string;
    cid?: number;
    cSet?: string;
}
/**
 * @hidden
 */
export interface RemoteOptions {
    from?: string;
    requestType?: string;
    sortBy?: string;
    select?: string;
    skip?: string;
    group?: string;
    take?: string;
    search?: string;
    count?: string;
    where?: string;
    aggregates?: string;
    expand?: string;
    accept?: string;
    multipartAccept?: string;
    batch?: string;
    changeSet?: string;
    batchPre?: string;
    contentId?: string;
    batchContent?: string;
    changeSetContent?: string;
    batchChangeSetContentType?: string;
    updateType?: string;
    localTime?: boolean;
    apply?: string;
}
/**
 * @hidden
 */
export interface LazyLoad {
    isLazyLoad: boolean;
    onDemandGroupInfo: OnDemandGroupInfo;
}
/**
 * @hidden
 */
export interface OnDemandGroupInfo {
    level: number;
    skip: number;
    take: number;
    where: Predicate[];
}
/**
 * @hidden
 */
export interface LazyLoadGroupArgs {
    query: Query;
    lazyLoad: LazyLoad;
    result: Object[];
    group: Object[];
    page: {
        pageIndex: number;
        pageSize: number;
    };
}
