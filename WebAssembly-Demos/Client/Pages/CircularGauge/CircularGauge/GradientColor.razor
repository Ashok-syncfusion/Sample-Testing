@page "/circular-gauge/gradient-color"

@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.DropDowns

@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample shows how linear gradient color and radial gradient color are applied to the circular gauge elements.</p>
</SampleDescription>
<ActionDescription>
   <p> The circular gauge supports gradient coloring in a linear or radial manner. The gradient type can be changed using the <b>Gradient Type</b> dropdown list in the properties panel. In the same way, the element for which the gradient color should be applied is decided by the <b>Elements</b> dropdown list. </p>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <SfCircularGauge>
        <CircularGaugeAxes>
            <CircularGaugeAxis Radius="80%" StartAngle="210" EndAngle="150" Minimum="0" Maximum="100">
                <CircularGaugeAxisLabelStyle Offset="10">
                    <CircularGaugeAxisLabelFont Size="12px" FontFamily="Roboto" FontWeight="Regular" />
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeAxisLineStyle Width="0" Color="transparent" />
                <CircularGaugeAxisMajorTicks Width="0" Interval="10" />
                <CircularGaugeAxisMinorTicks Width="0" />
                <CircularGaugePointers>
                    <CircularGaugePointer NeedleStartWidth="2" Value="65" Radius="85%" Color="#E63B86" PointerWidth="12">
                        <LinearGradient StartValue="@PointerLinearStart" EndValue="@PointerLinearEnd">
                            <ColorStops>
                                <ColorStop Opacity="0.9" Offset="0%" Color="#FEF3F9"></ColorStop>
                                <ColorStop Opacity="0.9" Offset="70%" Color="#E63B86"></ColorStop>
                            </ColorStops>
                        </LinearGradient>
                        <RadialGradient Radius="@PointerRadialRadius">
                            <InnerPosition X="@PointerInnerX" Y="@PointerInnerY"></InnerPosition>
                            <OuterPosition X="@PointerOuterX" Y="@PointerOuterY"></OuterPosition>
                            <ColorStops>
                                <ColorStop Opacity="0.9" Offset="0%" Color="#FEF3F9"></ColorStop>
                                <ColorStop Opacity="0.9" Offset="60%" Color="#E63B86"></ColorStop>
                            </ColorStops>
                        </RadialGradient>
                        <CircularGaugePointerAnimation Enable="true"></CircularGaugePointerAnimation>
                        <CircularGaugeCap Radius="12" Color="White">
                            <CircularGaugeCapBorder Width="2.5" Color="#E63B86" />
                        </CircularGaugeCap>
                        <CircularGaugeNeedleTail Length="0%"></CircularGaugeNeedleTail>
                    </CircularGaugePointer>
                </CircularGaugePointers>
                <CircularGaugeRanges>
                    <CircularGaugeRange RoundedCornerRadius="10" Color="#E63B86" Start="0" End="100" StartWidth="18" EndWidth="18">
                        <LinearGradient StartValue="@RangeLinearStart" EndValue="@RangeLinearEnd">
                            <ColorStops>
                                <ColorStop Opacity="0.9" Offset="0%" Color="#9E40DC"></ColorStop>
                                <ColorStop Opacity="0.9" Offset="70%" Color="#E63B86"></ColorStop>
                            </ColorStops>
                        </LinearGradient>
                        <RadialGradient Radius="@RangeRadialRadius">
                            <InnerPosition X="@RangeInnerX" Y="@RangeInnerY"></InnerPosition>
                            <OuterPosition X="@RangeOuterX" Y="@RangeOuterY"></OuterPosition>
                            <ColorStops>
                                <ColorStop Opacity="0.9" Offset="90%" Color="#9E40DC"></ColorStop>
                                <ColorStop Opacity="0.9" Offset="160%" Color="#E63B86"></ColorStop>
                            </ColorStops>
                        </RadialGradient>
                    </CircularGaugeRange>
                </CircularGaugeRanges>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>
<div class="col-md-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%">
                <tr>
                    <td>
                        <div>Gradient Type</div>
                    </td>
                    <td>
                        <div style="margin-left: -10px">
                            <SfDropDownList DataSource="@GradientDataSource" @bind-Value="@GradientValueTypeValue">
                                <DropDownListEvents TItem="GradientValueType" TValue="string" ValueChange="@GradientValueTypeChange" />
                                <DropDownListFieldSettings Text="Name" Value="Name" />
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Elements</div>
                    </td>
                    <td>
                        <div style="margin-left: -10px">
                            <SfDropDownList DataSource="@ElementData" @bind-Value="@ElementValueTypeValue">
                                <DropDownListEvents TItem="ElementValueType" TValue="string" ValueChange="@ElementValueTypeChange" />
                                <DropDownListFieldSettings Text="Name" Value="Name" />
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>
<style>
    tr {
        height: 50px;
    }

    td {
        width: 50%;
    }
</style>
@code{
    public string StartValue = "0%";
    public string EndValue = "100%";
    public string RadialValue = "50%";
    public string PointerLinearStart;
    public string PointerLinearEnd;
    public string RangeLinearStart;
    public string RangeLinearEnd;
    public string PointerRadialRadius;
    public string PointerInnerX;
    public string PointerInnerY;
    public string PointerOuterX;
    public string PointerOuterY;
    public string RangeRadialRadius;
    public string RangeInnerX;
    public string RangeInnerY;
    public string RangeOuterX;
    public string RangeOuterY;
    private string GradientValueTypeValue = "Linear Gradient";
    private string ElementValueTypeValue = "Range";

    public class GradientValueType
    {
        public string Name { get; set; }
    }
    public List<GradientValueType> GradientDataSource = new List<GradientValueType> {
        new GradientValueType{ Name = "Linear Gradient"},
        new GradientValueType{ Name = "Radial Gradient"}
    };
    public class ElementValueType
    {
        public string Name { get; set; }
    }
    public List<ElementValueType> ElementData = new List<ElementValueType> {
        new ElementValueType{ Name = "Range"},
        new ElementValueType{ Name = "Pointer"}
    };

    protected override void OnInitialized()
    {
        RangeLinearStart = StartValue;
        RangeLinearEnd = EndValue;
    }

    private void GradientValueTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, GradientValueType> args)
    {
        GradientValueTypeValue = args.Value;
        UpdateGauge();
    }
    private void ElementValueTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, ElementValueType> args)
    {
        ElementValueTypeValue = args.Value;
        UpdateGauge();
    }

    private void UpdateGauge()
    {
        if (GradientValueTypeValue == "Linear Gradient" && ElementValueTypeValue == "Range")
        {
            RangeLinearStart = StartValue;
            RangeLinearEnd = EndValue;
            PointerLinearEnd = PointerLinearStart = string.Empty;
            RangeRadialRadius = RangeInnerX = RangeInnerY = RangeOuterX = RangeOuterY = string.Empty;
            PointerRadialRadius = PointerInnerX = PointerInnerY = PointerOuterX = PointerOuterY = string.Empty;
        }
        if (GradientValueTypeValue == "Linear Gradient" && ElementValueTypeValue == "Pointer")
        {
            RangeLinearStart = RangeLinearEnd = string.Empty;
            PointerLinearEnd = EndValue;
            PointerLinearStart = StartValue;
            RangeRadialRadius = RangeInnerX = RangeInnerY = RangeOuterX = RangeOuterY = string.Empty;
            PointerRadialRadius = PointerInnerX = PointerInnerY = PointerOuterX = PointerOuterY = string.Empty;
        }
        if (GradientValueTypeValue == "Radial Gradient" && ElementValueTypeValue == "Range")
        {
            RangeLinearStart = RangeLinearEnd = PointerLinearEnd = PointerLinearStart = string.Empty;
            PointerRadialRadius = PointerInnerX = PointerInnerY = PointerOuterX = PointerOuterY = string.Empty;
            RangeRadialRadius = RangeInnerX = RangeInnerY = RangeOuterX = RangeOuterY = RadialValue;
        }
        if (GradientValueTypeValue == "Radial Gradient" && ElementValueTypeValue == "Pointer")
        {
            PointerLinearStart = PointerLinearEnd = RangeLinearStart = RangeLinearEnd = string.Empty;
            RangeRadialRadius = RangeInnerX = RangeInnerY = RangeOuterX = RangeOuterY = string.Empty;
            PointerRadialRadius = PointerInnerX = PointerInnerY = PointerOuterX = PointerOuterY = RadialValue;
        }
    }
}